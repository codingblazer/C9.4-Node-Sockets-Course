Before this we were working only in one direction i.e. server responds when user does something i.e. it was only listening But now we willl do real time uusing socket i.e. server will also itself talk to client
We are using inbuilt module path for getting straight paths => when giving paths to express middleware, we want to give path of public but unlike earlier, we have to go back using .. and then enter from server.js
OR we can manually give path BUT since every computer is different, that path won't work => Above way of doing is shown in console.log
We can path lib for this => you give path like method 1 but it will simplify it according to one's computer => see logs for this as well

Next we ahve set up small express server which will pick files from the public directoty
Also added .gitignore file will node modules in it in the root of the project

we will set port config, then add start scripts in package.json for heroku to run our server and engine to tell heroku the version of node to run
We will add socketio lib and will use it on both front end and backend
Now to use socketio with express => express actuallu used http in its implementation=> to use socket, we must use http way instead of express
=> when we call app.listen(), it actually calls http.createServer(app).listen() func and then we listen to it => see how we have made changes and it will work same
=> we have done this because we neeed to provide the object returned by calling http.createServer(app) = server => earlier since this was called at back of express, we don't had this object and we didn't needed it..but we need it Now

=> change app.listen to server.listen since this is equivalent
=> var io = socketIO this is why we needed the server object

go to localhost:3000/socket.io/socket.io.js => it gives us javascript file which is lib containing code needed by client to make connection to server side and vice versa => if you remove var io = socketIO line => you can't access it => this line has allowed accces of this lib
=> now lets load this lib in your code of client side by src relative
=> now lets write some javascript code in frontend (right now writing it inside script tag) => io() func is available in the loaded lib which requests the server to open up a web socket for connection and keep it open
=> this method return the socket object which will be used for listening and sending to the server
=>Go to chrome dev tools and open network tab and refresh to see all the requests made by us
the request made by server/client are made in form of events and these events are lsitened by server/client
=> Now to listen to any event on server side, we use io.on('event name', callback) => whenever this event occurs, this registered callback will be called and we will be getting socket in arg
=> this socket obj is similar to socket that we got in front end by calling io()
=> Now you will see that if nodemon was active, the message 'the connection event has occured is already present' => But why even when we haven't made connection yet, we have registed events
=> This is because when we saved file, server using nodemon restarted and front end made connection event

VIMP - when the frontend and server are connected, both will remaine connected and open for each other whatever may happen
This connection end when ANY ONE of them leaves i.e. communication remains as long as both want to i.e. persistence => if on front end, the request in web browser is closed/ route we were requesting is closed by closing the tab  AND on server side, it can be server shutting down like happened in case of nodemon i.e.
the nodemon restarted the server by first closing it

IMP point 2 => when one of them leaves, the other keeps trying to reconnect though can't force it in anyway => check by closing the server and see network tab in dev tools => browser will keep trying to reconnect to server url, though page is already in loaded form/
Now inside the frontend, we will register the same connection event but here the name of the event is connect instead and we wont get socket object inside callback since we already have it

Similar is the disconnect event
For front end, to see the log, open console in web browser => the console of web browser ,like the console for node is our machine console = web browser console

Inside the server, we can register disconnect but we wont use .on for disconnect => we will use same signature we used in frontend inside the callback of connect because once the connection was made, we were inside this callback of connect
=> to register disconnect, it has to be done inside

Moved code of js in separate file
Dont use arrow funcitons on frontedn as they are not supported in some browser
Now we will how to create custom event i.e. register them, send/emit the custom events
first register a event in frontend newEmail => server will receive some new email and this event should be able to listened by frontend => create just like before, no change will be there in signature due to custom event=> Now based on some condition like receving new email, server can emit this event => on server side, emit this (without any condition for now)
=> on server side, send a event using emit function..we have optional 2nd arg in which we may/may not send a data => you may send data like 2, true or send a object which is preffered
the data you sent will be come as 1st arg in the registered event => client side in this case

Remember that on serve side, everythign happends inside onConnect while on frontend side, the emition happens inside onConnect and registrations happends outside onConnect
Note that in browser console, we can access the variables of our frontend js file directly => like socket
=> this makes debugging lot easier

When one user sends message to server, it actually gets broadcasted to everyone => if i create message from one tab in chrome, => i should see the message in other tab and this tab itself => locally we are using tabs but same would work on heroku on different browser/ diff networks => as soon as you have tab opened hitting the url of server, they are distinct user for server
=> since for server, anyone hitting his url is client => if server send message back to client => since all are clients, message goes to everyone => Similarly on heroku, you can see by opening url of heroku server for this in diff tabs => you can also open tabs on diff phones and hit heroku url
Now io object inside server.js is collection of all clients while the socket object represent one single user i.e. whenever connection between one tab and server happens, the socket for that tab is created => for each tab, we have diff prog instance of socket ob in their own lifecycle
=> if we call emit on io, it is sent to all client and if we call it on the socket object it will be sent to the tab/user associated with that socket
=> inside server.js, listener/register of message, lets say we want to further broadcast this message which is incoming to server to all the clients/tabs => we used io object for doing it
=> remove all other emit calls for now from both client and server (we can use browser to send emit from client side)

 Now this was not broadcasting actually bcoz in that the sender does not get message, all other gets it => but here, the sender was also getting the message itself => to avoid this,we make changes :
 => we use the socket.broadcast.emit for this => lets see the process => tab1,2,3 opened => only tab1 sent message => only inside its listener is involed inside which we are broadcasting to all except itself => using tab1's socket, we sent message to all

 Also, lets add simple emit from admin to tab1 itself that welcome to chat chatroom when he connects
 now instead of creating message object everytime, we will call funct  => create message.js
 Now we will replace this function everywhere and write unittest for this function

 Now we will see ack => when the message is sent we should get the acknowledgement back so that if any problem, we could send the message again
 => we have to make changes in both the listener and sender
 => For example => in receiver/listener, we will get callback as 2nd arg => call this callback function with your acknowledgement
 =>in sender/emitter, we add a callback function, we will give 3rd parameter to our emit function which will be the function => this function is the function which we just called above => whatever data you sent while calling this function, you will get it as arg => In other words, in listener side, you called a function of emitter side with some acknowledgement

 Now lets create some front end form for our chat app => when we submit form, it first refereshes and then in url add our inputs and then resets the field => at this point fields will be reset and in url we will have previous data
 =>But we want to override the submit button by listening and then fetching the result
 => in index.js, we first fetched the form and then prevented the defualt behvior of refreshing on submiting
 then we are taking the message from textfield and sednign it to server
 => now lets create a code to see the incoming messages
 => we will present messags in form of list and hence added list element in html
 => now inside lsitener of new incming message we have added jquery to add that incoming message to list

 Lets add send location button to this chat app => add button in html and jquery for it in index.js
 navigator.geolocation is accessible directly as it is present in almost all browser => if not => alert user of dat
 Now call getCurrentPosition function => 2 func as argument, first for success which will give us position obejct abd 2nd for error

 Now some browswe may not allow to access location if you are not on secured https but no worry as heroku url is always https
 Once you got this position, send lat and long via emit to server and listener in server side which will boradcast this location to all the users

 Now we will show this message via link to all the users => first like done, the location is sent to server => now server will broadcast it to all other users => Now in frontedn of every user, we should use these coord to show link to map => first add listener to this broadcasted message in frontend (since we are not sending simple message, we created new event : newLocationMessage as this event needs t be handled diff than normal message)

 Now we have added a css code already made by andrew and pasted in css file. And used classes from that css in our html
 Now we will add the reseting of sender pannel when msg is already sent. Also send location button is disabled until location is sent
 Lets study the timestamps => they are integers in ms => they are wrt to the Jan 1st 1970 in UTC => they are not locaiton dependent => 1000 means that 1 sec after 1jan 1970 00:00:00 am => we can also have negative values which would mean going into the past

 If we use inbuilt date function it don't provide us flexibility in formatting for ex we can't write months like jan feb => we first have to convert the integer to their resp month string
 => we will use moment lib for that
 //supports various formatting
 //=> see npm docs for moment ot see al the formats
 //this lib also contains manipulations => we can add days/months/etc to current date etc
 Now in message.js let's replace newDate by its moment equivalent just because we dont want different things used for time in project
 Now to use moment in frontend, inside node_moduless-> moments-> copy moments.js to our lib folder and then in html include this using script tag
 
